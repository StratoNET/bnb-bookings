{{template "base" .}}

{{define "content"}}
  <div class="container">
    <div class="row">
      <div class="col-md-3"></div>
      <div class="col-md-6">
        <h1 class="my-5">Search for Availability</h1>

        <form action="" method="post" class="needs-validation" novalidate>
          <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
          <div class="row">
            <div class="col">
              <div class="row" id="reservation-dates">
                <div class="col-md-6">
                  <label for="start_date">From</label>
                  <input required class="form-control mt-1" type="text" name="start_date" id="start_date" placeholder=" Arrival date">
                </div>
                <div class="col-md-6">
                  <label for="end_date">To</label>
                  <input required class="form-control mt-1" type="text" name="end_date" id="end_date" placeholder=" Departure date">
                </div>
              </div>
            </div>
          </div>

          <hr>

          <button type="submit" class="btn btn-primary">Search Availability</button>

        </form>
      </div>
      <div class="col-md-3"></div>
    </div>

    <div class="row">
      <div class="col offset-3 mt-5">
          <button id="aButton" class="btn btn-outline-secondary">Click</button>
      </div>
    </div>

  </div>
{{end}}

{{define "js"}}
  <script>
    let attention = Prompt();

    (function () {
      'use strict';
      window.addEventListener('load', function () {
        // fetch all the forms needed to apply custom Bootstrap validation styles
        let forms = document.getElementsByClassName('needs-validation');
        // loop through them & prevent submission
        Array.prototype.filter.call(forms, function (form) {
          form.addEventListener('submit', function (event) {
            if (form.checkValidity() === false) {
              event.preventDefault();
              event.stopPropagation();
            }
            form.classList.add('was-validated');
          }, false);
        });
      }, false);
    })();

    const rd = document.getElementById('reservation-dates');
    const rangePicker = new DateRangePicker(rd, {
      format: "dd/mm/yyyy",
    });

    document.getElementById("aButton").addEventListener("click", function () {
      let modal_html = `
        <div class="container">
          <form id="search-availability-form" name="search-availability-form" action="" method="post" class="needs-validation" novalidate>
            <div class="row" id="reservation-dates-modal">
              <div class="col">
                <input required class="form-control" type="text" name="start" id="start" placeholder=" Arrival date" disabled>
              </div>
              <div class="col">
                <input required class="form-control" type="text" name="end" id="end" placeholder=" Departure date" disabled>
              </div>
            </div>
          </form>
        </div>`;
      // notify("Success !", "success")
      // notifyModal("Welcome", "<em>Eden House BnB</em>", "success", "Book Now")
      attention.custom({
        title: 'Choose your dates',
        msg: modal_html,
      });
      // attention.toast({
      //   msg: 'Hello World',
      // });
    })

    function notify(msg, msgType) {
      // set fixed navbar z-index = 0 allowing full noti(e)fication display
      document.getElementById("navbar").style.zIndex = 0
      notie.alert({
        type: msgType,
        text: msg,
      })
    }

    function notifyModal(title, html, icon, confirmButtonText) {
      Swal.fire({
        title: title,
        html: html,
        icon: icon,
        confirmButtonText: confirmButtonText,
      })
    }

    function Prompt() {
      let toast = function (params) {
        const {
          msg = '',
          icon = 'success',
          position = 'top-end',

        } = params;

        const Toast = Swal.mixin({
          toast: true,
          title: msg,
          position: position,
          icon: icon,
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
          }
        })

        Toast.fire({})
      }

      let success = function (params) {
        const {
          title = "",
          msg = "",
          footer = "",
        } = params;

        Swal.fire({
          icon: 'success',
          title: title,
          text: msg,
          footer: footer,
        })

      }

      let error = function (params) {
        const {
          title = "",
          msg = "",
          footer = "",
        } = params;

        Swal.fire({
          icon: 'error',
          title: title,
          text: msg,
          footer: footer,
        })

      }

      async function custom(params) {
        const {
          title = "",
          msg = "",
        } = params;

        const { value: formValues } = await Swal.fire({
          title: title,
          html: msg,
          backdrop: false,
          focusConfirm: false,
          showCancelButton: true,
          willOpen: () => {
            const rdm = document.getElementById("reservation-dates-modal");
            const rp = new DateRangePicker(rdm, {
              format: 'dd/mm/yyyy',
              showOnFocus: true,
            })
          },
          didOpen: () => {
            document.getElementById("start").removeAttribute("disabled");
            document.getElementById("end").removeAttribute("disabled");
          },
          preConfirm: () => {
            return [
              document.getElementById('start').value,
              document.getElementById('end').value
            ]
          }
        })

        if (formValues) {
          Swal.fire(JSON.stringify(formValues))
        }
      }

      return {
        toast: toast,
        success: success,
        error: error,
        custom: custom,
      }
    }
  </script>
{{end}}